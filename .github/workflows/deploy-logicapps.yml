name: Deploy Logic App Workflows

on:
  workflow_run:
    workflows: ["Deploy Infrastructure"]
    types: 
      - completed
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  RESOURCE_GROUP: ShadowPivot
  LOCATION: eastus

jobs:
  deploy-workflows:
    runs-on: ubuntu-latest
    # Only run if infrastructure deployment was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Infrastructure Exists
        run: |
          echo "🔍 Verifying that infrastructure components exist..."
          
          # Check if Logic Apps exist
          if ! az logic workflow show --resource-group $RESOURCE_GROUP --name entry-agent-step --query "name" -o tsv; then
            echo "❌ Entry Logic App not found. Infrastructure may not be deployed yet."
            exit 1
          fi
          
          # Check if storage account exists
          if ! az storage account show --resource-group $RESOURCE_GROUP --name shdwagentstorage --query "name" -o tsv; then
            echo "❌ Storage account not found. Infrastructure may not be deployed yet."
            exit 1
          fi
          
          # Check if AI Foundry exists
          if ! az cognitiveservices account show --resource-group $RESOURCE_GROUP --name shadow-pivot-ai-foundry --query "name" -o tsv; then
            echo "❌ AI Foundry not found. Infrastructure may not be deployed yet."
            exit 1
          fi
          
          echo "✅ All infrastructure components verified."

      - name: Get Infrastructure Outputs
        id: infra-outputs
        run: |
          echo "🔍 Getting infrastructure outputs..."
          
          # Get storage connection info
          STORAGE_CONNECTION_ID=$(az resource show \
            --resource-group $RESOURCE_GROUP \
            --name azurequeues-connection \
            --resource-type Microsoft.Web/connections \
            --query "id" -o tsv)
          
          # Get AI Foundry info
          AI_FOUNDRY_ENDPOINT=$(az cognitiveservices account show \
            --resource-group $RESOURCE_GROUP \
            --name shadow-pivot-ai-foundry \
            --query "properties.endpoint" -o tsv)
          
          # Get managed identity info
          MANAGED_IDENTITY_CLIENT_ID=$(az identity show \
            --resource-group $RESOURCE_GROUP \
            --name shadow-pivot-logic-apps-identity \
            --query "clientId" -o tsv)
          
          # Get GPT-4 deployment name
          GPT4_DEPLOYMENT_NAME=$(az cognitiveservices account deployment show \
            --resource-group $RESOURCE_GROUP \
            --account-name shadow-pivot-ai-foundry \
            --deployment-name gpt-4-deployment \
            --query "name" -o tsv)
          
          echo "storage_connection_id=$STORAGE_CONNECTION_ID" >> $GITHUB_OUTPUT
          echo "ai_foundry_endpoint=$AI_FOUNDRY_ENDPOINT" >> $GITHUB_OUTPUT
          echo "managed_identity_client_id=$MANAGED_IDENTITY_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "gpt4_deployment_name=$GPT4_DEPLOYMENT_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Infrastructure outputs retrieved successfully."

      - name: Deploy Entry Logic App Workflow
        run: |
          echo "🚀 Deploying Entry Logic App workflow..."
          
          az logic workflow update \
            --resource-group $RESOURCE_GROUP \
            --name entry-agent-step \
            --definition @logic-apps/entry/workflow.json \
            --parameters '{
              "$connections": {
                "value": {
                  "azurequeues": {
                    "connectionId": "${{ steps.infra-outputs.outputs.storage_connection_id }}",
                    "connectionName": "azurequeues",
                    "id": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.Web/locations/${{ env.LOCATION }}/managedApis/azurequeues"
                  }
                }
              }
            }'
          
          echo "✅ Entry Logic App workflow deployed successfully."

      - name: Deploy Design Generation Logic App Workflow
        run: |
          echo "🚀 Deploying Design Generation Logic App workflow..."
          
          az logic workflow update \
            --resource-group $RESOURCE_GROUP \
            --name design-gen-step \
            --definition @logic-apps/design-gen/workflow.json \
            --parameters '{
              "$connections": {
                "value": {
                  "azurequeues": {
                    "connectionId": "${{ steps.infra-outputs.outputs.storage_connection_id }}",
                    "connectionName": "azurequeues",
                    "id": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.Web/locations/${{ env.LOCATION }}/managedApis/azurequeues"
                  }
                }
              },
              "ai_foundry_endpoint": {
                "value": "${{ steps.infra-outputs.outputs.ai_foundry_endpoint }}"
              },
              "gpt4_deployment_name": {
                "value": "${{ steps.infra-outputs.outputs.gpt4_deployment_name }}"
              },
              "managed_identity_client_id": {
                "value": "${{ steps.infra-outputs.outputs.managed_identity_client_id }}"
              }
            }'
          
          echo "✅ Design Generation Logic App workflow deployed successfully."

      - name: Deploy Content Generation Logic App Workflow
        run: |
          echo "🚀 Deploying Content Generation Logic App workflow..."
          
          az logic workflow update \
            --resource-group $RESOURCE_GROUP \
            --name content-gen-step \
            --definition @logic-apps/content-gen/workflow.json \
            --parameters '{
              "$connections": {
                "value": {
                  "azurequeues": {
                    "connectionId": "${{ steps.infra-outputs.outputs.storage_connection_id }}",
                    "connectionName": "azurequeues",
                    "id": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.Web/locations/${{ env.LOCATION }}/managedApis/azurequeues"
                  }
                }
              },
              "ai_foundry_endpoint": {
                "value": "${{ steps.infra-outputs.outputs.ai_foundry_endpoint }}"
              },
              "gpt4_deployment_name": {
                "value": "${{ steps.infra-outputs.outputs.gpt4_deployment_name }}"
              },
              "managed_identity_client_id": {
                "value": "${{ steps.infra-outputs.outputs.managed_identity_client_id }}"
              }
            }'
          
          echo "✅ Content Generation Logic App workflow deployed successfully."

      - name: Deploy Review Logic App Workflow
        run: |
          echo "🚀 Deploying Review Logic App workflow..."
          
          az logic workflow update \
            --resource-group $RESOURCE_GROUP \
            --name review-step \
            --definition @logic-apps/review/workflow.json \
            --parameters '{
              "$connections": {
                "value": {
                  "azurequeues": {
                    "connectionId": "${{ steps.infra-outputs.outputs.storage_connection_id }}",
                    "connectionName": "azurequeues",
                    "id": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/providers/Microsoft.Web/locations/${{ env.LOCATION }}/managedApis/azurequeues"
                  }
                }
              },
              "ai_foundry_endpoint": {
                "value": "${{ steps.infra-outputs.outputs.ai_foundry_endpoint }}"
              },
              "gpt4_deployment_name": {
                "value": "${{ steps.infra-outputs.outputs.gpt4_deployment_name }}"
              },
              "managed_identity_client_id": {
                "value": "${{ steps.infra-outputs.outputs.managed_identity_client_id }}"
              }
            }'
          
          echo "✅ Review Logic App workflow deployed successfully."

      - name: Verify Logic App Deployments
        run: |
          echo "🔍 Verifying Logic App workflow deployments..."
          
          # List all logic apps and their status
          logic_apps=("entry-agent-step" "design-gen-step" "content-gen-step" "review-step")
          
          for app in "${logic_apps[@]}"; do
            echo "Checking Logic App: $app"
            
            status=$(az logic workflow show \
              --resource-group $RESOURCE_GROUP \
              --name $app \
              --query "state" -o tsv)
            
            if [ "$status" = "Enabled" ]; then
              echo "✅ $app is enabled and ready"
              
              # Get the trigger URL for entry logic app
              if [ "$app" = "entry-agent-step" ]; then
                trigger_url=$(az logic workflow trigger list-callback-url \
                  --resource-group $RESOURCE_GROUP \
                  --workflow-name $app \
                  --name manual \
                  --query "value" -o tsv 2>/dev/null || echo "Manual trigger not found")
                
                if [ "$trigger_url" != "Manual trigger not found" ]; then
                  echo "🌐 Entry Logic App trigger URL: $trigger_url"
                  echo "entry_trigger_url=$trigger_url" >> $GITHUB_ENV
                fi
              fi
            else
              echo "⚠️ $app status: $status"
            fi
          done
          
          echo "✅ Logic App workflow verification completed."

      - name: Test Entry Logic App
        run: |
          echo "🧪 Testing Entry Logic App with a simple request..."
          
          # Only test if we have the trigger URL
          if [ -n "$entry_trigger_url" ]; then
            response=$(curl -s -X POST "$entry_trigger_url" \
              -H "Content-Type: application/json" \
              -d '{
                "prompt": "Test deployment - create a simple greeting",
                "userId": "github-actions-test",
                "sessionId": "deployment-test-' $(date +%s) '"
              }' \
              -w "HTTP_STATUS:%{http_code}")
            
            http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
            
            if [ "$http_status" = "200" ] || [ "$http_status" = "202" ]; then
              echo "✅ Entry Logic App test successful (HTTP $http_status)"
            else
              echo "⚠️ Entry Logic App test returned HTTP $http_status"
              echo "Response: $response"
            fi
          else
            echo "⚠️ Could not retrieve entry trigger URL for testing"
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 Logic App workflow deployment completed!"
          echo ""
          echo "📋 Deployment Summary:"
          echo "  ✅ Entry Logic App: entry-agent-step"
          echo "  ✅ Design Generation: design-gen-step"
          echo "  ✅ Content Generation: content-gen-step"
          echo "  ✅ Review Logic App: review-step"
          echo ""
          echo "🔗 Next Steps:"
          echo "  1. Monitor Logic App executions in Azure Portal"
          echo "  2. Check AI Foundry usage in Azure AI Studio"
          echo "  3. Test the complete AI pipeline"
          echo "  4. Review logs and metrics"
          echo ""
          echo "📍 Resource Group: $RESOURCE_GROUP"
          echo "📍 Location: $LOCATION"
